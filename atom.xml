<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying pigs</title>
  <subtitle>在任何一个成功的后面都有着十五年到二十年的生活经验，都有着丰富的生活经验，要是没有这些经验，任何才思敏捷恐怕也不会有，而且在这里，恐怕任何天才也都无济于事。##站点副标题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liangjinxie.top/"/>
  <updated>2017-02-21T08:01:17.169Z</updated>
  <id>http://liangjinxie.top/</id>
  
  <author>
    <name>Pluto</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo命令</title>
    <link href="http://liangjinxie.top/2017/02/21/hexo%E5%91%BD%E4%BB%A4/"/>
    <id>http://liangjinxie.top/2017/02/21/hexo命令/</id>
    <published>2017-02-21T07:52:41.000Z</published>
    <updated>2017-02-21T08:01:17.169Z</updated>
    
    <content type="html"><![CDATA[<p>#hexo<br><code>npm install hexo -g</code> #安装<br><code>npm update hexo -g</code> #升级<br><code>hexo init</code> #初始化</p>
<hr>
<p>#简写<br><code>hexo n</code> “我的博客” == <code>hexo new</code> “我的博客” #新建文章<br><code>hexo p</code> == <code>hexo publish</code><br><code>hexo g</code> == <code>hexo generate</code>#生成<br><code>hexo s</code> == <code>hexo server</code> #启动服务预览<br><code>hexo d</code> == <code>hexo deploy</code>#部署  </p>
<hr>
<p>#服务器<br><code>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</code>hexo server -s<code>#静态模式</code>hexo server -p 5000<code>#更改端口</code>hexo server -i 192.168.1.1` #自定义 IP  </p>
<p><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令<br><code>hexo g</code>#生成静态网页<br><code>hexo d</code> #开始部署  </p>
<hr>
<p>#监视文件变动<br><code>hexo generate</code> #使用 Hexo 生成静态文件快速而且简单<br><code>hexo generate --watch</code> #监视文件变动  </p>
<hr>
<p>#完成后部署<br>两个命令的作用是相同的<br><code>hexo generate --deploy</code><br><code>hexo deploy --generate</code><br><code>hexo deploy -g</code><br><code>hexo server -g</code>  </p>
<hr>
<p>#草稿<br><code>hexo publish [layout] &lt;title&gt;</code>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#hexo&lt;br&gt;&lt;code&gt;npm install hexo -g&lt;/code&gt; #安装&lt;br&gt;&lt;code&gt;npm update hexo -g&lt;/code&gt; #升级&lt;br&gt;&lt;code&gt;hexo init&lt;/code&gt; #初始化&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;#简写&lt;br&gt;&lt;c
    
    </summary>
    
    
      <category term="hexo" scheme="http://liangjinxie.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="http://liangjinxie.top/2017/02/21/git%E5%91%BD%E4%BB%A4/"/>
    <id>http://liangjinxie.top/2017/02/21/git命令/</id>
    <published>2017-02-21T07:23:28.000Z</published>
    <updated>2017-02-21T07:26:10.766Z</updated>
    
    <content type="html"><![CDATA[<p>##Git常用操作命令：  </p>
<p>###1) 远程仓库相关命令<br>检出仓库：$ git clone git://github.com/jquery/jquery.git<br>查看远程仓库：$ git remote -v<br>添加远程仓库：$ git remote add [name] [url]<br>删除远程仓库：$ git remote rm [name]<br>修改远程仓库：$ git remote set-url –push [name] [newUrl]<br>拉取远程仓库：$ git pull [remoteName] [localBranchName]<br>推送远程仓库：$ git push [remoteName] [localBranchName]  </p>
<p>*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：<br>$git push origin test:master         // 提交本地test分支作为远程的master分支<br>$git push origin test:test              // 提交本地test分支作为远程的test分支  </p>
<p>###2）分支(branch)操作相关命令<br>查看本地分支：$ git branch<br>查看远程分支：$ git branch -r<br>创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支<br>切换分支：$ git checkout [name]<br>创建新分支并立即切换到新分支：$ git checkout -b [name]<br>删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项<br>合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并<br>创建远程分支(本地分支push到远程)：$ git push origin [name]<br>删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name]   </p>
<p>*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)<br>$git symbolic-ref HEAD refs/heads/[name]<br>$rm .git/index<br>$git clean -fdx  </p>
<p>###3）版本(tag)操作相关命令<br>查看版本：$ git tag<br>创建版本：$ git tag [name]<br>删除版本：$ git tag -d [name]<br>查看远程版本：$ git tag -r<br>创建远程版本(本地版本push到远程)：$ git push origin [name]<br>删除远程版本：$ git push origin :refs/tags/[name]<br>合并远程仓库的tag到本地：$ git pull origin –tags<br>上传本地tag到远程仓库：$ git push origin –tags<br>创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’  </p>
<p>###4) 子模块(submodule)相关操作命令<br>添加子模块：$ git submodule add [url] [path]<br>   如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs<br>初始化子模块：$ git submodule init  —-只在首次检出仓库时运行一次就行<br>更新子模块：$ git submodule update —-每次更新或切换分支后都需要运行一下<br>删除子模块：（分4步走哦）<br> 1) $ git rm –cached [path]<br> 2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉<br> 3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉<br> 4) 手动删除子模块残留的目录  </p>
<p>###5）忽略一些文件、文件夹不提交<br>在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如<br>target<br>bin<br>*.db</p>
<p>=====================</p>
<p>##Git 常用命令<br>git branch 查看本地所有分支<br>git status 查看当前状态<br>git commit 提交<br>git branch -a 查看所有的分支<br>git branch -r 查看本地所有分支<br>git commit -am “init” 提交并且加注释<br>git remote add origin git@192.168.1.119:ndshow<br>git push origin master 将文件给推到服务器上<br>git remote show origin 显示远程库origin里的资源<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联<br>git checkout –track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config –list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m “This is the message describing the commit” 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm –cached a.a 移除文件(只从暂存区中删除)<br>git commit -m “remove” 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff –cached 或 $ git diff –staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中<br>git stash pop 将文件从临时空间pop下来<br>git remote add origin git@github.com:username/Hello-World.git<br>git push origin master 将本地项目给提交到服务器中<br>git pull 本地与服务器端同步<br>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。<br>git push origin serverfix:awesomebranch<br>git fetch 相当于是从远程获取最新版本到本地，不会自动merge<br>git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：<br>git branch branch_0.1 master 从主分支master创建branch_0.1分支<br>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0<br>git checkout branch_1.0/master 切换到branch_1.0/master分支<br>du -hs</p>
<p>mkdir WebApp  创建<br>cd WebApp   进入<br>git init    初始化<br>touch README<br>git add README<br>git commit -m ‘first commit’<br>git remote add origin git@github.com:daixu/WebApp.git<br>git push -u origin master  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Git常用操作命令：  &lt;/p&gt;
&lt;p&gt;###1) 远程仓库相关命令&lt;br&gt;检出仓库：$ git clone git://github.com/jquery/jquery.git&lt;br&gt;查看远程仓库：$ git remote -v&lt;br&gt;添加远程仓库：$ git rem
    
    </summary>
    
    
      <category term="css html javascript" scheme="http://liangjinxie.top/tags/css-html-javascript/"/>
    
  </entry>
  
</feed>
